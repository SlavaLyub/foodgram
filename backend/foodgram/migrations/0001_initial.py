# Generated by Django 4.2 on 2024-08-30 15:14

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(help_text='Введите свой адрес электронной почты.', max_length=254, unique=True, verbose_name='Электронная почта')),
                ('username', models.CharField(error_messages={'unique': 'Пользователь с таким именем уже существует.'}, help_text='Введите уникальное имя пользователя.', max_length=150, unique=True, validators=[django.core.validators.RegexValidator(inverse_match=True, message='The field contains invalid characters. Only letters, spaces, and hyphens are allowed.', regex='$%^&#:;!')], verbose_name='Имя пользователя')),
                ('first_name', models.CharField(help_text='Введите ваше имя.', max_length=150, validators=[django.core.validators.RegexValidator(inverse_match=False, message='The field contains invalid characters. Only letters, spaces, and hyphens are allowed.', regex='[^a-zA-Zа-яА-ЯёЁ\\-\\]')], verbose_name='Имя')),
                ('last_name', models.CharField(help_text='Введите вашу фамилию.', max_length=150, validators=[django.core.validators.RegexValidator(inverse_match=False, message='The field contains invalid characters. Only letters, spaces, and hyphens are allowed.', regex='[^a-zA-Zа-яА-ЯёЁ\\-\\]')], verbose_name='Фамилия')),
                ('avatar', models.ImageField(default=None, help_text='Загрузите фото профиля.', null=True, upload_to='users/avatars', verbose_name='Фото профиля')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='FavoriteRecipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда рецепт был добавлен в избранное.', verbose_name='Дата добавления')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Введите название ингредиента.', max_length=100, unique=True, validators=[django.core.validators.RegexValidator(inverse_match=False, message='The field contains invalid characters. Only letters, spaces, and hyphens are allowed.', regex='[^a-zA-Zа-яА-ЯёЁ\\s\\-\\(\\)]')], verbose_name='Название ингредиента')),
                ('unit', models.CharField(help_text='Введите единицу измерения для ингредиента.', max_length=50, verbose_name='Единица измерения')),
            ],
            options={
                'verbose_name': 'Ингредиент',
                'verbose_name_plural': 'Ингредиенты',
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Введите название рецепта.', max_length=100, validators=[django.core.validators.RegexValidator(inverse_match=False, message='The field contains invalid characters. Only letters, spaces, and hyphens are allowed.', regex='[^a-zA-Zа-яА-ЯёЁ\\s\\-\\(\\)]')], verbose_name='Название рецепта')),
                ('image', models.ImageField(help_text='Загрузите изображение для рецепта.', upload_to='recipes/images/', verbose_name='Изображение рецепта')),
                ('text', models.TextField(help_text='Введите полное описание рецепта.', verbose_name='Описание рецепта')),
                ('cooking_time', models.PositiveIntegerField(help_text='Введите время приготовления в минутах.', verbose_name='Время приготовления')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Дата и время создания рецепта.', verbose_name='Дата создания')),
                ('short_url', models.CharField(blank=True, help_text='Короткий URL для рецепта.', max_length=6, unique=True, verbose_name='Короткий URL')),
                ('author', models.ForeignKey(help_text='Автор рецепта.', on_delete=django.db.models.deletion.CASCADE, related_name='recipes', to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
            ],
            options={
                'verbose_name': 'Рецепт',
                'verbose_name_plural': 'Рецепты',
                'ordering': ['-date_created'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Введите название тега.', max_length=50, unique=True, validators=[django.core.validators.RegexValidator(inverse_match=False, message='The field contains invalid characters. Only letters, spaces, and hyphens are allowed.', regex='[^a-zA-Zа-яА-ЯёЁ\\s\\-\\]')], verbose_name='Название тега')),
                ('slug', models.SlugField(help_text='Слаг тега, используется в URL.', unique=True, verbose_name='Слаг')),
            ],
            options={
                'verbose_name': 'Тег',
                'verbose_name_plural': 'Теги',
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subscribed_to', models.ForeignKey(help_text='Пользователь, на которого подписываются.', on_delete=django.db.models.deletion.CASCADE, related_name='subscribers', to=settings.AUTH_USER_MODEL, verbose_name='На кого подписан')),
                ('user', models.ForeignKey(help_text='Пользователь, который подписывается.', on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to=settings.AUTH_USER_MODEL, verbose_name='Подписчик')),
            ],
            options={
                'verbose_name': 'Подписка',
                'verbose_name_plural': 'Подписки',
            },
        ),
        migrations.CreateModel(
            name='ShoppingCart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда рецепт был добавлен в избранное.', verbose_name='Дата добавления')),
                ('recipe', models.ForeignKey(help_text='Рецепт, который был добавлен в корзину покупок.', on_delete=django.db.models.deletion.CASCADE, related_name='shopping_cart_by', to='foodgram.recipe', verbose_name='Рецепт')),
                ('user', models.ForeignKey(help_text='Пользователь, добавивший этот рецепт в корзину покупок.', on_delete=django.db.models.deletion.CASCADE, related_name='shopping_cart_recipes', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Корзина покупок',
                'verbose_name_plural': 'Корзины покупок',
            },
        ),
        migrations.CreateModel(
            name='RecipeIngredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.PositiveSmallIntegerField(help_text='Введите количество ингредиента, используемого в рецепте.', verbose_name='Количество')),
                ('ingredient', models.ForeignKey(help_text='Ингредиент, используемый в рецепте.', on_delete=django.db.models.deletion.CASCADE, related_name='recipe_ingredients+', to='foodgram.ingredient', verbose_name='Ингредиент')),
                ('recipe', models.ForeignKey(help_text='Рецепт, к которому относится этот ингредиент.', on_delete=django.db.models.deletion.CASCADE, related_name='ingredients', to='foodgram.recipe', verbose_name='Рецепт')),
            ],
            options={
                'verbose_name': 'Ингредиент рецепта',
                'verbose_name_plural': 'Ингредиенты рецептов',
            },
        ),
        migrations.AddField(
            model_name='recipe',
            name='tags',
            field=models.ManyToManyField(help_text='Выберите теги для рецепта.', related_name='recipes', to='foodgram.tag', verbose_name='Теги'),
        ),
        migrations.AddConstraint(
            model_name='ingredient',
            constraint=models.UniqueConstraint(fields=('name', 'unit'), name='unique_ingredients'),
        ),
        migrations.AddField(
            model_name='favoriterecipe',
            name='recipe',
            field=models.ForeignKey(help_text='Рецепт, который был добавлен в избранное.', on_delete=django.db.models.deletion.CASCADE, related_name='favorited_by', to='foodgram.recipe', verbose_name='Рецепт'),
        ),
        migrations.AddField(
            model_name='favoriterecipe',
            name='user',
            field=models.ForeignKey(help_text='Пользователь, добавивший этот рецепт в избранное.', on_delete=django.db.models.deletion.CASCADE, related_name='favorite_recipes', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddConstraint(
            model_name='subscription',
            constraint=models.UniqueConstraint(fields=('user', 'subscribed_to'), name='unique_subscription'),
        ),
        migrations.AddConstraint(
            model_name='subscription',
            constraint=models.CheckConstraint(check=models.Q(('user', models.F('subscribed_to')), _negated=True), name='prevent_self_subscription'),
        ),
        migrations.AddConstraint(
            model_name='shoppingcart',
            constraint=models.UniqueConstraint(fields=('user', 'recipe'), name='unique_shopping_cart'),
        ),
        migrations.AddConstraint(
            model_name='recipeingredient',
            constraint=models.UniqueConstraint(fields=('recipe', 'ingredient'), name='unique_recipe_ingredient'),
        ),
        migrations.AddConstraint(
            model_name='recipe',
            constraint=models.UniqueConstraint(fields=('author', 'name'), name='unique_author_name_recipe'),
        ),
    ]
